class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def safe(row,col,board):
            i,j=row,col
            while i>=0 and j>=0: # for diagonaly upwards direction in left
                if board[i][j]=='Q':
                    return False
                i-=1
                j-=1
            i,j=row,col
            while i<n and j>=0: # for diagonaly downwards direction in left
                if board[i][j]=='Q':
                    return False
                i+=1
                j-=1
            while col>=0: # for checking the same column
                if board[row][col]=='Q':
                    return False
                col-=1
            return True
        
        def solve(c,board):
            if c==n:
                ans.append(board[:])
                return 
            for i in range(n):
                if safe(i,c,board):
                    board[i]=board[i][:c]+'Q'+board[i][c+1:]
                    solve(c+1,board)
                    board[i]=board[i][:c]+'.'+board[i][c+1:]
                    
        board=['.'*n for _ in range(n)]
        ans=[]
        solve(0,board)
        return len(ans)       
